@using CentroEventos.UI.Components
@using CentroEventos.Aplicacion.Excepciones
@using CentroEventos.Aplicacion.Servicio
@page "/ListadoEventosDeportivos"
@rendermode InteractiveServer
@inject ListadoEventoDeportivoUseCase ListadoEventoDeportivoUseCase
@inject IServicioSesion Servicio
@inject BajaEventoDeportivoUseCase BajaEventoDeportivoUseCase
@inject NavigationManager Navegador

<div class="eventos-container">
    <DialogoConfirmacion @ref="dialogo" OnConfirmado="ConfirmarEliminacionEvento"/>
    
    @if (!accesoPermitido)
    {
        <p class="status-loading">Redirigiendo...</p>
    }
    
    <div class="eventos-header">
        <h1>Listado de Eventos Deportivos</h1>
        <p>Administra todos los eventos deportivos del sistema</p>
    </div>
    
    @if (_mensajesDeError.Count > 0)
    {
        <div class="error-list">
            @foreach (var error in _mensajesDeError)
            {
                <div class="error-item">@error</div>
            }
        </div>
    }

    <div class="eventos-card">
        <div class="table-container">
            <table class="eventos-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Fecha y Hora de inicio</th>
                        <th>Duración en horas</th>
                        <th>Cupo máximo</th>
                        <th>ID del Responsable</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (_listaEventos.Count == 0)
                    {
                        <tr>
                            <td colspan="8" class="no-events">No se encontraron eventos deportivos</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var evento in _listaEventos)
                        {
                            <tr>
                                <td>@evento.Id</td>
                                <td>@evento.Nombre</td>
                                <td>@evento.Descripcion</td>
                                <td>@evento.FechaHoraInicio.ToString("g")</td>
                                <td>@evento.DuracionHoras</td>
                                <td>@evento.CupoMaximo</td>
                                <td>@evento.ResponsableId</td>
                                <td class="actions-cell">
                                    <button class="action-btn edit-btn" @onclick="() => NavegarAEditarEvento(evento)">
                                        Editar
                                    </button>
                                    <button class="action-btn delete-btn" @onclick="() => MostrarDialogoConfirmacion(evento)">
                                        Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private bool accesoPermitido;
    private bool redirigido = false;
    private List<EventoDeportivo> _listaEventos = new List<EventoDeportivo>();
    private List<string> _mensajesDeError = new List<string>();
    private DialogoConfirmacion dialogo = null!;
    private EventoDeportivo? _eventoSeleccionadoParaEliminar = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (!Servicio.EstaAutenticado && !redirigido)
            {
                redirigido = true;
                Navegador.NavigateTo("/");
            }
            else
            {
                accesoPermitido = true;
                EstadoActualizar();
            }
        }
    }

    protected override void OnInitialized()
    {
        CargarListaDeEventos();
    }

    private void CargarListaDeEventos()
    {
        _listaEventos = ListadoEventoDeportivoUseCase.Ejecutar();
    }

    private void MostrarDialogoConfirmacion(EventoDeportivo evento)
    {
        _eventoSeleccionadoParaEliminar = evento;
        dialogo.Mostrar($"¿Desea eliminar el evento '{evento.Nombre}', a cargo del responsable con Id: {evento.ResponsableId}?");
    }

    private void ConfirmarEliminacionEvento()
    {
        _mensajesDeError.Clear();

        if (_eventoSeleccionadoParaEliminar == null)
            return;

        try
        {
            BajaEventoDeportivoUseCase.Ejecutar(_eventoSeleccionadoParaEliminar.Id, Servicio.UsuarioActual!.Id);
            CargarListaDeEventos();
        }
        catch (OperacionInvalidaException ex)
        {
            _mensajesDeError.Add(ex.Message);
        }
        catch (EntidadNotFoundException ex)
        {
            _mensajesDeError.Add(ex.Message);
        }
        catch (Exception)
        {
            _mensajesDeError.Add("Ocurrió un error inesperado al intentar eliminar el evento.");
        }
        finally
        {
            EstadoActualizar();
        }
    }

    private void NavegarAEditarEvento(EventoDeportivo evento)
    {
        Navegador.NavigateTo($"AgregarEventoDeportivo/{evento.Id}");
    }

    private void EstadoActualizar()
    {
        InvokeAsync(StateHasChanged);
    }
}