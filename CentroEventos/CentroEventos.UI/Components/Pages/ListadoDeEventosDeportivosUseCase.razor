@using CentroEventos.UI.Components
@using CentroEventos.Aplicacion.Excepciones
@page "/ListadoEventosDeportivos"
@rendermode InteractiveServer
@inject ListadoEventoDeportivoUseCase ListadoEventoDeportivoUseCase
@inject BajaEventoDeportivoUseCase BajaEventoDeportivoUseCase
@inject NavigationManager Navegador

<DialogoConfirmacion @ref="dialogo" OnConfirmado="Eliminar"/>

@if (_mensajeErrores.Count > 0)
{
    <div class="alert alert-danger">
        @foreach (var error in _mensajeErrores)
        {
            <div>@error</div>
        }
    </div>
}


<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Nombre</th>
      <th>Descripcion</th> 
      <th>Fecha y Hora de inicio</th>
      <th>Duracion en horas</th>
      <th>Cupo maximo de personas</th>
      <th>Id de responsable</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var even in _lista)
    {
    <tr>
      <td>@even.Id</td>
      <td>@even.Nombre</td>
      <td>@even.Descripcion</td>
      <td>@even.FechaHoraInicio</td>
      <td>@even.DuracionHoras</td>
      <td>@even.CupoMaximo</td>
      <td>@even.ResponsableId</td>
      <td>
        <button class="btn btn-primary" @onclick="()=>ModificarEventoDeportivo(even)">
          Editar
        </button>
        <button class="btn btn-danger" @onclick="()=>ConfirmarEliminacion(even)">
          Eliminar
        </button>
      </td>
    </tr>
    }
  </tbody>
</table>

@code {
    List<EventoDeportivo> _lista = new List<EventoDeportivo>();
    List<string> _mensajeErrores = new();
    protected override void OnInitialized()
    {
       _lista = ListadoEventoDeportivoUseCase.Ejecutar();
    }

    DialogoConfirmacion dialogo = null!;
    EventoDeportivo? _EventoParaEliminar = null;

   private void ConfirmarEliminacion(EventoDeportivo even)
   {
      _EventoParaEliminar = even;
      dialogo.Mostrar($"¿Desea eliminar el evento {even.Nombre}, a cargo del responsable con Id: {even.ResponsableId}?");
   }

  private void Eliminar()
  {
    _mensajeErrores.Clear();

    if (_EventoParaEliminar != null)
    {
        try
        {
            BajaEventoDeportivoUseCase.Ejecutar(_EventoParaEliminar.Id, 1);
            _lista = ListadoEventoDeportivoUseCase.Ejecutar();
        }
        catch (OperacionInvalidaException ex)
        {
            _mensajeErrores.Add(ex.Message);
        }
        catch (Exception)
        {
            _mensajeErrores.Add("Ocurrió un error inesperado al intentar eliminar el evento.");
        }
    }
  }
   void ModificarEventoDeportivo(EventoDeportivo even)
   {
     Navegador.NavigateTo($"AgregarEventoDeportivo/{even.Id}");
   }
}