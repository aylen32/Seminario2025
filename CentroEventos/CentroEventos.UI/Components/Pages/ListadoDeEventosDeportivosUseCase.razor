@using CentroEventos.UI.Components
@using CentroEventos.Aplicacion.Excepciones
@using CentroEventos.Aplicacion.Servicio
@page "/ListadoEventosDeportivos"
@rendermode InteractiveServer
@inject ListadoEventoDeportivoUseCase ListadoEventoDeportivoUseCase
@inject IServicioSesion Servicio
@inject BajaEventoDeportivoUseCase BajaEventoDeportivoUseCase
@inject NavigationManager Navegador

<DialogoConfirmacion @ref="dialogo" OnConfirmado="ConfirmarEliminacionEvento"/>
@if (!accesoPermitido)
{
    <p>Redirigiendo...</p>
}
@if (_mensajesDeError.Count > 0)
{
    <div class="alert alert-danger">
        @foreach (var error in _mensajesDeError)
        {
            <div>@error</div>
        }
    </div>
}

<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Nombre</th>
      <th>Descripcion</th> 
      <th>Fecha y Hora de inicio</th>
      <th>Duracion (horas)</th>
      <th>Cupo maximo</th>
      <th>Id de responsable</th>
      <th>Acciones</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var evento in _listaEventos)
    {
    <tr>
      <td>@evento.Id</td>
      <td>@evento.Nombre</td>
      <td>@evento.Descripcion</td>
      <td>@evento.FechaHoraInicio</td>
      <td>@evento.DuracionHoras</td>
      <td>@evento.CupoMaximo</td>
      <td>@evento.ResponsableId</td>
      <td>
        <button class="boton-personalizado-editar" @onclick="() => NavegarAEditarEvento(evento)">
          Editar
        </button>
        <button class="boton-personalizado-eliminar" @onclick="() => MostrarDialogoConfirmacion(evento)">
          Eliminar
        </button>
      </td>
    </tr>
    }
  </tbody>
</table>

@code {
    private bool accesoPermitido;
    private bool redirigido = false;
    private List<EventoDeportivo> _listaEventos = new List<EventoDeportivo>();
    private List<string> _mensajesDeError = new List<string>();
    private DialogoConfirmacion dialogo = null!;
    private EventoDeportivo? _eventoSeleccionadoParaEliminar = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (!Servicio.EstaAutenticado && !redirigido)
            {
                redirigido = true;
                Navegador.NavigateTo("/");
            }
            else
            {
                accesoPermitido = true;
                EstadoActualizar();
            }
        }
    }

    protected override void OnInitialized()
    {
        CargarListaDeEventos();
    }

    private void CargarListaDeEventos()
    {
        _listaEventos = ListadoEventoDeportivoUseCase.Ejecutar();
    }

    private void MostrarDialogoConfirmacion(EventoDeportivo evento)
    {
        _eventoSeleccionadoParaEliminar = evento;
        dialogo.Mostrar($"¿Desea eliminar el evento '{evento.Nombre}', a cargo del responsable con Id: {evento.ResponsableId}?");
    }

    private void ConfirmarEliminacionEvento()
    {
        _mensajesDeError.Clear();

        if (_eventoSeleccionadoParaEliminar == null)
            return;

        try
        {
            BajaEventoDeportivoUseCase.Ejecutar(_eventoSeleccionadoParaEliminar.Id, Servicio.UsuarioActual!.Id);
            CargarListaDeEventos();
        }
        catch (OperacionInvalidaException ex)
        {
            _mensajesDeError.Add(ex.Message);
        }
        catch (EntidadNotFoundException ex)
        {
            _mensajesDeError.Add(ex.Message);
        }
        catch (Exception)
        {
            _mensajesDeError.Add("Ocurrió un error inesperado al intentar eliminar el evento.");
        }
        finally
        {
            EstadoActualizar();
        }
    }

    private void NavegarAEditarEvento(EventoDeportivo evento)
    {
        Navegador.NavigateTo($"AgregarEventoDeportivo/{evento.Id}");
    }

    private void EstadoActualizar()
    {
        InvokeAsync(StateHasChanged);
    }
}