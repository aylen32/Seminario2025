@page "/"
@layout LoginLayout
@rendermode InteractiveServer
@using CentroEventos.UI.Components.Layout
@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion.Interfaces
@using CentroEventos.Aplicacion.Validaciones
@using CentroEventos.Aplicacion.Enumerativos
@using CentroEventos.Aplicacion.Hash
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@inject IServicioSesion Sesion
@inject IRepositorioUsuario Repositorio
@inject IValidadorUsuario Validador
@inject AltaUsuarioUseCase AltaUsuarioUseCase
@inject NavigationManager Navigation

<PageTitle>Iniciar Sesión</PageTitle>
<link href="/estilosPrueba.css"rel="stylesheet" />
<h1 class=" titulo"> Inicio </h1>
 <div class="contenedor-formularios">
        <ul class="contenedor-tabs">
            <li class="@((modo == "login") ? "active" : "")">
                <a @onclick='() => modo = "login"'>Iniciar Sesión</a>
            </li>
            <li class="@((modo == "registro") ? "active" : "")">
                <a @onclick='() => modo = "registro"'>Registrarse</a>
            </li>
        </ul>

        @if (modo == "login")
        {
            @if (!string.IsNullOrEmpty(mensajeErrorLogin)){
                <div class="alert alert-danger">
                     @mensajeErrorLogin
                </div>
            }   

            <EditForm Model="modeloLogin" OnValidSubmit="IniciarSesion" FormName="loginForm">
                <div class="contenedor-input">
                    <InputText @bind-Value="modeloLogin.Correo" placeholder="Correo" />
                </div>
                <div class="contenedor-input">
                    <InputText @bind-Value="modeloLogin.Contrasenia" placeholder="Contraseña" type="password" />
                </div>
                <input type="submit" value="Ingresar" class="button" />
            </EditForm>
        }
        else
        {
            @if (!string.IsNullOrEmpty(mensajeErrorRegis))
            {
                <div class="alert alert-danger">@mensajeErrorRegis</div>
            }
            <EditForm Model="modeloRegistro" OnValidSubmit="RegistrarUsuario"FormName="registroForm">
            <div class="fila-inputs">
                 <div class="contenedor-input">
                    <InputText @bind-Value="modeloRegistro.Nombre" placeholder="Nombre"/>
                </div>
            <div class="contenedor-input">
            <InputText @bind-Value="modeloRegistro.Apellido" placeholder="Apellido" />
            </div>
            </div>
            <div class="contenedor-input">
            <InputText @bind-Value="modeloRegistro.CorreoElectronico" placeholder="Correo" />
         </div>
    <div class="contenedor-input">
        <InputText @bind-Value="modeloRegistro.Contrasenia" placeholder="Contraseña" type="password" />
    </div>
    <input type="submit" value="Registrarse" class="button" />
</EditForm>
        }
    </div>

 

@code {
    
    private string mensajeErrorLogin = "";
    private string mensajeErrorRegis = "";
    private string modo = "login";

    private LoginModel modeloLogin = new();
    private RegistroModel modeloRegistro = new();

    void IniciarSesion()
{
    mensajeErrorLogin = "";

    var usuario = Repositorio.ObtenerTodosConPermisos()
    .FirstOrDefault(u => u.CorreoElectronico == modeloLogin.Correo);


    if (usuario == null)
    {
        mensajeErrorLogin = "Correo no registrado.";
        return;
    }

    var hashIngresado = SHA256Helper.ComputeSHA256(modeloLogin.Contrasenia);

    if (usuario.HashContrasenia != hashIngresado)
    {
        mensajeErrorLogin = "Contraseña incorrecta.";
        return;
    }

    Sesion.IniciarSesion(usuario);
    Navigation.NavigateTo("/home", forceLoad: false);
}


    void RegistrarUsuario()
    {
        if (string.IsNullOrWhiteSpace(modeloRegistro.Contrasenia))
    {
        mensajeErrorRegis = "La contraseña no puede estar vacía.";
        modo = "registro"; 
        return;
    }
        if (string.IsNullOrWhiteSpace(modeloRegistro.Nombre))
    {
        mensajeErrorRegis = "El nombre no puede estar vacío.";
        modo = "registro"; 
        return;
    }
        if (string.IsNullOrWhiteSpace(modeloRegistro.Apellido))
    {
        mensajeErrorRegis = "El apellido no puede estar vacío.";
        modo = "registro"; 
        return;
    }
        if (string.IsNullOrWhiteSpace(modeloRegistro.CorreoElectronico))
    {
        mensajeErrorRegis = "La dirección de correo no puede estar vacía.";
        modo = "registro"; 
        return;
    }
    
      var hash = SHA256Helper.ComputeSHA256(modeloRegistro.Contrasenia);

      var nuevo = Usuario.CrearNuevo();
      nuevo.Nombre = modeloRegistro.Nombre;
      nuevo.Apellido = modeloRegistro.Apellido;
      nuevo.CorreoElectronico = modeloRegistro.CorreoElectronico;
      nuevo.HashContrasenia = hash;
      nuevo.Permisos = new List<UsuarioPermiso>();

      

        AltaUsuarioUseCase.Ejecutar(nuevo);
        Sesion.IniciarSesion(nuevo);
        Navigation.NavigateTo("/home",  forceLoad: false);
    }

    public class LoginModel
    {
        public string Correo { get; set; } = "";
        public string Contrasenia { get; set; } = "";
    }

    public class RegistroModel
    {
        public string Nombre { get; set; } = "";
        public string Apellido { get; set; } = "";
        public string CorreoElectronico { get; set; } = "";
        public string Contrasenia { get; set; } = "";
    }
}

