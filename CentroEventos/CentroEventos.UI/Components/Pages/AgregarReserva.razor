@using CentroEventos.Aplicacion.Excepciones
@using CentroEventos.Aplicacion.Servicio
@page "/AgregarReserva/{Id:int?}"
@rendermode InteractiveServer

@inject NavigationManager Navegador;
@inject IServicioSesion Servicio
@inject ModificarReservaUseCase ModificarReservaUseCase
@inject ObtenerReservaUseCase ObtenerReservaUseCase
@inject AltaReservaUseCase AltaReservaUseCase

<div class="reserva-form-container">
    @if (!_usuarioAutenticado)
    {
        <p class="status-loading">Redirigiendo...</p>
    }

    <div class="reserva-form-header">
        @if (_esNuevaReserva)
        {
            <h3>Agregar Nueva Reserva</h3>
            <p>Complete todos los campos requeridos (*)</p>
        }
        else
        {
            <h3>Modificar Reserva del @_reserva.FechaAltaReserva.ToString("dd/MM/yyyy")</h3>
            <p>Actualice los campos necesarios</p>
        }
    </div>
     @if (_errores.Count > 0)
    {
        <div class="error-container">
            <strong>Se encontraron los siguientes errores:</strong>
            <ul class="error-list">
                @foreach (var error in _errores)
                {
                    <li class="error-item">@error</li>
                }
            </ul>
        </div>
    }

    <div class="reserva-form-group">
        <label class="reserva-form-label">ID de Persona*:</label>
        <input placeholder="Ingrese el ID de la persona" 
               @bind="_reserva.PersonaId" 
               class="reserva-form-control" 
               readonly="@(!_esNuevaReserva)" />
    </div>

    <div class="reserva-form-group">
        <label class="reserva-form-label">ID de Evento Deportivo*:</label>
        <input placeholder="Ingrese el ID del evento" 
               @bind="_reserva.EventoDeportivoId" 
               class="reserva-form-control" 
               readonly="@(!_esNuevaReserva)" />
    </div>

    <div class="reserva-form-group">
        <label class="reserva-form-label">Fecha de la Reserva:</label>
        <input type="datetime-local" 
               @bind="_reserva.FechaAltaReserva" 
               class="reserva-form-control" 
               readonly />
    </div>

    <div class="reserva-form-group">
        <label class="reserva-form-label">Estado de la Reserva:</label>
        @if (_esNuevaReserva)
        {
            <input class="reserva-form-control" 
                   value="Pendiente" 
                   readonly />
        }
        else
        {
            <select class="reserva-form-control" @bind="_reserva.Estado">
                <option value="Pendiente">Pendiente</option>
                <option value="Presente">Presente</option>
                <option value="Ausente">Ausente</option>
            </select>
        }
    </div>

    <button class="btn-submit-reserva" @onclick="AceptarFormulario">
        <span class="material-symbols-outlined">@(_esNuevaReserva ? "add_circle" : "save")</span>
        @(_esNuevaReserva ? "Crear Reserva" : "Guardar Cambios")
    </button>
</div>

@code {
    private bool _usuarioAutenticado;
    private bool _redirigido = false;

    Reserva _reserva = Reserva.CrearNueva();
    [Parameter] public int? Id { get; set; }

    bool _esNuevaReserva = true;
    List<string> _errores = new();

    protected override void OnAfterRender(bool primerRender)
    {
        if (primerRender)
        {
            if (!Servicio.EstaAutenticado && !_redirigido)
            {
                _redirigido = true;
                Navegador.NavigateTo("/");
            }
            else
            {
                _usuarioAutenticado = true;
                CargarReservaSiExiste();
                StateHasChanged();
            }
        }
    }

    private void CargarReservaSiExiste()
    {
        if (Id != null)
        {
            var encontrada = ObtenerReservaUseCase.Ejecutar(Id.Value);
            if (encontrada != null)
            {
                _reserva = encontrada;
                _esNuevaReserva = false;
            }
        }
    }

    private void AceptarFormulario()
    {
        _errores.Clear();

        try
        {
            if (_esNuevaReserva)
            {
                AltaReservaUseCase.Ejecutar(_reserva, Servicio.UsuarioActual!.Id);
            }
            else
            {
                ModificarReservaUseCase.Ejecutar(_reserva, Servicio.UsuarioActual!.Id);
            }

            _reserva = Reserva.CrearNueva();
            Navegador.NavigateTo("ListadoReservas");
        }
        catch (ValidacionException ex)
        {
            _errores = ex.Message
                .Split(new[] { ". " }, StringSplitOptions.RemoveEmptyEntries)
                .Select(m => m.Trim() + ".")
                .ToList();
        }
        catch (OperacionInvalidaException ex)
        {
            _errores.Add(ex.Message);
        }
        catch (FalloAutorizacionException ex)
        {
            _errores.Add(ex.Message);
        }
        catch (EntidadNotFoundException ex)
        {
            _errores.Add(ex.Message);
        }
        catch (Exception ex)
        {
            _errores.Add("Error inesperado: " + ex.Message);
        }
    }
}