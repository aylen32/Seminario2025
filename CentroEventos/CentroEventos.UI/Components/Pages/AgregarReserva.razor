@using CentroEventos.Aplicacion.Excepciones
@using CentroEventos.Aplicacion.Servicio
@page "/AgregarReserva/{Id:int?}"
@rendermode InteractiveServer

@inject NavigationManager Navegador;
@inject IServicioSesion Servicio
@inject ModificarReservaUseCase ModificarReservaUseCase
@inject ObtenerReservaUseCase ObtenerReservaUseCase
@inject AltaReservaUseCase AltaReservaUseCase

@if (!_usuarioAutenticado)
{
    <p>Redirigiendo...</p>
}

@if (_errores.Count > 0)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in _errores)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<style>
  h3 { color: darkblue; }
</style>

@if (_esNuevaReserva)
{
    <h3>Agregando una Nueva Reserva</h3>
}
else
{
    <h3>Modificando la Reserva creada el: @_reserva.FechaAltaReserva</h3>
}

<div class="mb-3">
    <label>Id de Persona*:</label>
    <input placeholder="Id de Persona" @bind="_reserva.PersonaId" class="form-control" readonly="@(!_esNuevaReserva)" />
</div>

<div class="mb-3">
    <label>Id de Evento Deportivo*:</label>
    <input placeholder="Id de Evento Deportivo" @bind="_reserva.EventoDeportivoId" class="form-control" readonly="@(!_esNuevaReserva)" />
</div>

<div class="mb-3">
    <label>Fecha de la Reserva:</label>
    <input placeholder="Fecha de la Reserva" @bind="_reserva.FechaAltaReserva" class="form-control" readonly />
</div>

<div class="mb-3">
    <label>Estado de la Reserva:</label>
    @if (_esNuevaReserva)
    {
        <input class="form-control" value="Pendiente" readonly />
    }
    else
    {
        <select class="form-control" @bind="_reserva.Estado">
            <option value="Pendiente">Pendiente</option>
            <option value="Presente">Presente</option>
            <option value="Ausente">Ausente</option>
        </select>
    }
</div>

<button class="btn btn-primary" @onclick="AceptarFormulario">
    <span class="material-symbols-outlined" style="vertical-align: middle; margin-right: 4px;">add_circle</span>
    Aceptar
</button>

@code {
    private bool _usuarioAutenticado;
    private bool _redirigido = false;

    Reserva _reserva = Reserva.CrearNueva();
    [Parameter] public int? Id { get; set; }

    bool _esNuevaReserva = true;
    List<string> _errores = new();

    protected override void OnAfterRender(bool primerRender)
    {
        if (primerRender)
        {
            if (!Servicio.EstaAutenticado && !_redirigido)
            {
                _redirigido = true;
                Navegador.NavigateTo("/");
            }
            else
            {
                _usuarioAutenticado = true;
                CargarReservaSiExiste();
                StateHasChanged();
            }
        }
    }

    private void CargarReservaSiExiste()
    {
        if (Id != null)
        {
            var encontrada = ObtenerReservaUseCase.Ejecutar(Id.Value);
            if (encontrada != null)
            {
                _reserva = encontrada;
                _esNuevaReserva = false;
            }
        }
    }

    private void AceptarFormulario()
    {
        _errores.Clear();

        try
        {
            if (_esNuevaReserva)
            {
                AltaReservaUseCase.Ejecutar(_reserva, Servicio.UsuarioActual!.Id);
            }
            else
            {
                ModificarReservaUseCase.Ejecutar(_reserva, Servicio.UsuarioActual!.Id);
            }

            _reserva = Reserva.CrearNueva();
            Navegador.NavigateTo("ListadoReservas");
        }
        catch (ValidacionException ex)
        {
            _errores = ex.Message
                .Split(new[] { ". " }, StringSplitOptions.RemoveEmptyEntries)
                .Select(m => m.Trim() + ".")
                .ToList();
        }
        catch (OperacionInvalidaException ex)
        {
            _errores.Add(ex.Message);
        }
        catch (FalloAutorizacionException ex)
        {
            _errores.Add(ex.Message);
        }
        catch (EntidadNotFoundException ex)
        {
            _errores.Add(ex.Message);
        }
        catch (Exception ex)
        {
            _errores.Add("Error inesperado: " + ex.Message);
        }
    }
}