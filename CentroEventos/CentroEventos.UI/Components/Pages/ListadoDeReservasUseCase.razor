@using CentroEventos.UI.Components
@using CentroEventos.Aplicacion.Excepciones
@using CentroEventos.Aplicacion.Servicio
@page "/ListadoReservas"
@rendermode InteractiveServer
@inject IServicioSesion Servicio
@inject ListadoReservaUseCase ListadoReservaUseCase
@inject BajaReservaUseCase BajaReservaUseCase
@inject NavigationManager Navegador

@if (!_usuarioAutenticado)
{
    <p>Redirigiendo...</p>
}

<DialogoConfirmacion @ref="dialogoConfirmacion" OnConfirmado="EliminarReservaConfirmada" />

@if (_mensajesError.Count > 0)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var mensaje in _mensajesError)
            {
                <li>@mensaje</li>
            }
        </ul>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>ID Persona</th>
            <th>ID Evento</th>
            <th>Fecha</th>
            <th>Estado</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var reserva in _reservas)
        {
            <tr>
                <td>@reserva.Id</td>
                <td>@reserva.PersonaId</td>
                <td>@reserva.EventoDeportivoId</td>
                <td>@reserva.FechaAltaReserva</td>
                <td>@reserva.Estado</td>
                <td>
                    <button class="boton-personalizado-editar" @onclick="@(() => IrAPaginaModificarReserva(reserva))">
                        Editar
                    </button>
                    <button class="boton-personalizado-eliminar" @onclick="@(() => PedirConfirmacionEliminacion(reserva))">
                        Eliminar
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool _usuarioAutenticado;
    private bool _yaRedirigido = false;

    private List<Reserva> _reservas = new();
    private List<string> _mensajesError = new();
    private DialogoConfirmacion dialogoConfirmacion = null!;
    private Reserva? _reservaSeleccionada = null;

    protected override void OnAfterRender(bool primerRender)
    {
        if (primerRender)
        {
            if (!Servicio.EstaAutenticado && !_yaRedirigido)
            {
                _yaRedirigido = true;
                Navegador.NavigateTo("/");
            }
            else
            {
                _usuarioAutenticado = true;
                RefrescarListadoReservas();
                StateHasChanged();
            }
        }
    }

    private void RefrescarListadoReservas()
    {
        _reservas = ListadoReservaUseCase.Ejecutar();
    }

    private void PedirConfirmacionEliminacion(Reserva reserva)
    {
        _mensajesError.Clear();
        _reservaSeleccionada = reserva;
        dialogoConfirmacion.Mostrar($"¿Desea eliminar la reserva de la persona ID {reserva.PersonaId} para el evento ID {reserva.EventoDeportivoId}?");
    }

    private void EliminarReservaConfirmada()
    {
        _mensajesError.Clear();

        try
        {
            if (_reservaSeleccionada != null)
            {
                BajaReservaUseCase.Ejecutar(_reservaSeleccionada.Id, Servicio.UsuarioActual!.Id);
                RefrescarListadoReservas();
            }
        }
        catch (FalloAutorizacionException ex)
        {
            _mensajesError.Add(ex.Message);
        }
        catch (OperacionInvalidaException ex)
        {
            _mensajesError.Add(ex.Message);
        }
        catch (EntidadNotFoundException ex)
        {
            _mensajesError.Add(ex.Message);
        }
        catch (ValidacionException ex)
        {
            _mensajesError = ex.Message
                .Split(new[] { ". " }, StringSplitOptions.RemoveEmptyEntries)
                .Select(m => m.Trim() + ".")
                .ToList();
        }
        catch (Exception ex)
        {
            _mensajesError.Add("Ocurrió un error inesperado: " + ex.Message);
        }
    }

    private void IrAPaginaModificarReserva(Reserva reserva)
    {
        Navegador.NavigateTo($"AgregarReserva/{reserva.Id}");
    }
}