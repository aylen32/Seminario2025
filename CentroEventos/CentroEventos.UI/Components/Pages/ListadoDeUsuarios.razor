@page "/ListadoUsuarios"
@inject IServicioSesion ServicioSesion
@inject IServicioAutorizacion ServicioAutorizacion
@inject ListadoUsuarioUseCase ListarUsuariosUseCase
@inject ActualizarPermisosUsuarioUseCase ActualizarPermisosUseCase
@inject ModificarUsuarioUseCase ModificarUsuarioUseCase
@inject BajaUsuarioUseCase BajaUsuarioUseCase
@inject NavigationManager Navegador
@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion.Enumerativos
@using CentroEventos.Aplicacion.Hash
@using CentroEventos.Aplicacion.Excepciones

<div class="container py-4">
    <div class="header text-center">
        <h1>Administración de Usuarios</h1>
    </div>
    
    <div class="card-container">
        @if (!tieneAcceso)
        {
            <div class="text-center">
                <p class="status-message status-loading">Redirigiendo...</p>
            </div>
        }
        else if (usuarios == null || usuarios.Count == 0)
        {
            <div class="text-center">
                <p class="status-message status-loading">Cargando usuarios...</p>
            </div>
        }
        else
        {
            <h2 class="main-title">Listado de Usuarios</h2>
            
            <div class="user-select">
                <h3 class="section-title">Seleccionar Usuario</h3>
                <select class="select-box" @onchange="AlSeleccionarUsuario">
                    <option disabled selected>-- Seleccionar usuario --</option>
                    @foreach (var u in usuarios)
                    {
                        <option value="@u.Id">@u.Nombre @u.Apellido (@u.CorreoElectronico)</option>
                    }
                </select>
            </div>
            
            @if (usuarioSeleccionado != null)
            {
                <div>
                    <h3 class="section-title">Información del Usuario</h3>

                    @if (_mensajeErrores?.Count > 0)
                    {
                        <div class="error-container alert alert-danger mt-2">
                            <strong>Se encontraron los siguientes errores:</strong>
                            <ul class="error-list mb-0">
                                @foreach (var error in _mensajeErrores)
                                {
                                    <li class="error-item">@error</li>
                                }
                            </ul>
                        </div>
                    }
                    
                    <div class="form-container">
                        <EditForm Model="modelo" OnValidSubmit="ConfirmarModificacion">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            
                            <div class="mb-3">
                                <label class="form-label">Nombre:</label>
                                <InputText class="form-control" @bind-Value="modelo!.Nombre" />
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Apellido:</label>
                                <InputText class="form-control" @bind-Value="modelo.Apellido" />
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Correo electrónico:</label>
                                <InputText class="form-control" @bind-Value="modelo.CorreoElectronico" />
                            </div>
                            
                            <div class="mb-3 password-field">
                                <label class="form-label">Contraseña:</label>
                                <input type="password" 
                                       class="form-control" 
                                       placeholder="Dejar en blanco para no cambiar"
                                       @bind="nuevaCon" />
                            </div>


                                <button class="btn btn-primary" type="submit">Guardar cambios</button>
                            
                                <button class="btn btn-danger ms-2" type="button" @onclick="MostrarDialogoConfirmacionEliminar">Eliminar Usuario</button>
                            
                        
                           
                        </EditForm>
                    </div>
                    
                    <div class="permissions-container">
                        <h3 class="section-title">Administración de Permisos</h3>
                        <h4 class="sub-title">Permisos de @usuarioSeleccionado.Nombre @usuarioSeleccionado.Apellido</h4>
                        
                        @foreach (var tipo in Enum.GetValues<PermisoTipo>())
                        {
                            <div class="permission-item">
                                <input type="checkbox"
                                       class="form-check-input"
                                       checked="@permisosSeleccionados.Contains(tipo)"
                                       @onchange="() => AlternarPermiso(tipo)" />
                                <label class="form-check-label">@tipo</label>
                            </div>
                        }
                        
                        <div class="mt-3">
                            <button class="btn btn-secondary" @onclick="GuardarPermisos">Guardar Cambios</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<DialogoConfirmacion @ref="dialogoConfirmacion" OnConfirmado="EliminarUsuarioConfirmado" />

@code {
    private bool tieneAcceso = false;
    private bool yaRedirigio = false;
    private Usuario? modelo;
    private string? nuevaCon;
    private List<string>? _mensajeErrores = new();
    List<Usuario> usuarios = new();
    Usuario? usuarioSeleccionado;
    HashSet<PermisoTipo> permisosSeleccionados = new();
    private DialogoConfirmacion dialogoConfirmacion = null!;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (!ServicioSesion.EstaAutenticado)
            {
                if (!yaRedirigio)
                {
                    yaRedirigio = true;
                    Navegador.NavigateTo("/");
                }
            }
            else
            {
                tieneAcceso = true;
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        usuarios = ListarUsuariosUseCase.Ejecutar();
    }

    void AlSeleccionarUsuario(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int idUsuario))
        {
            usuarioSeleccionado = usuarios.FirstOrDefault(u => u.Id == idUsuario);

            permisosSeleccionados = usuarioSeleccionado?.Permisos
                .Where(p => p.Permiso != null)
                .Select(p => p.Permiso!.Tipo)
                .ToHashSet() ?? new HashSet<PermisoTipo>();
        }
        
        if (ServicioSesion.UsuarioActual is not null && usuarioSeleccionado != null)
        {
            modelo = Usuario.CrearNuevo();
            {
                modelo.Id = usuarioSeleccionado.Id;
                modelo.Nombre = usuarioSeleccionado.Nombre;
                modelo.Apellido = usuarioSeleccionado.Apellido;
                modelo.CorreoElectronico = usuarioSeleccionado.CorreoElectronico;
                modelo.HashContrasenia = usuarioSeleccionado.HashContrasenia;
                modelo.Permisos = usuarioSeleccionado.Permisos;
            };
        }
        _mensajeErrores = new List<string>();
    }

    private void MostrarDialogoConfirmacionEliminar()
    {
        _mensajeErrores = new List<string>();
        dialogoConfirmacion.Mostrar($"¿Desea eliminar al usuario {usuarioSeleccionado?.Nombre} {usuarioSeleccionado?.Apellido}?");
    }

    private void EliminarUsuarioConfirmado()
    {
        if (usuarioSeleccionado == null || ServicioSesion.UsuarioActual == null)
            return;

        try
        {
            BajaUsuarioUseCase.Ejecutar(usuarioSeleccionado.Id, ServicioSesion.UsuarioActual.Id);
            usuarios = ListarUsuariosUseCase.Ejecutar();
            usuarioSeleccionado = null;
            modelo = null;
            nuevaCon = null;
            permisosSeleccionados.Clear();
            _mensajeErrores = new List<string>();
        }
        catch (OperacionInvalidaException ex)
        {
            _mensajeErrores = ParsearErrores(ex.Message);
        }
        catch (EntidadNotFoundException ex)
        {
            _mensajeErrores = ParsearErrores(ex.Message);
        }
        catch (Exception)
        {
            _mensajeErrores = new List<string>() { "Ocurrió un error inesperado al eliminar el usuario." };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void ConfirmarModificacion()
    {
        if (!ServicioSesion.UsuarioActual!.Permisos.Any(p => p.Permiso?.Tipo == PermisoTipo.UsuarioModificacion))
        {
           _mensajeErrores = new List<string>() { "No tiene permiso para modificar usuarios." };
           StateHasChanged();
           return;
        }
        try
        {
            if (modelo != null)
            {
                if (!string.IsNullOrWhiteSpace(nuevaCon))
                {
                    modelo.HashContrasenia = SHA256Helper.ComputeSHA256(nuevaCon);
                }
                ModificarUsuarioUseCase.Ejecutar(modelo, ServicioSesion.UsuarioActual!.Id);
                _mensajeErrores = new List<string>();
            }
        }
        catch (ValidacionException ex)
        {
            _mensajeErrores = ParsearErrores(ex.Message);
        }
        catch (OperacionInvalidaException ex)
        {
            _mensajeErrores = ParsearErrores(ex.Message);
        }
        catch (Exception)
        {
            _mensajeErrores = new List<string>() { "Ocurrió un error inesperado al modificar el usuario." };
        }
        finally
        {
            StateHasChanged();
        }
    }

    void AlternarPermiso(PermisoTipo tipo)
    {
        if (permisosSeleccionados.Contains(tipo))
            permisosSeleccionados.Remove(tipo);
        else
            permisosSeleccionados.Add(tipo);
    }

    void GuardarPermisos()
    {try{
        if (usuarioSeleccionado != null)
        {   
            int idAdministrador = ServicioSesion.UsuarioActual!.Id;
            var listaPermisos = permisosSeleccionados.ToList();

            ActualizarPermisosUseCase.Ejecutar(idAdministrador, usuarioSeleccionado.Id, listaPermisos);

            usuarioSeleccionado = usuarios.First(u => u.Id == usuarioSeleccionado.Id);
            StateHasChanged();
                
        }
            }catch(OperacionInvalidaException ex){
            _mensajeErrores = ParsearErrores(ex.Message); 
        }
    }

    private List<string> ParsearErrores(string mensaje)
    {
        var lista = new List<string>();
        var mensajes = mensaje.Split('.', StringSplitOptions.RemoveEmptyEntries);
        foreach (var msg in mensajes)
        {
            var texto = msg.Trim();
            if (!string.IsNullOrEmpty(texto))
            {
                lista.Add(texto + ".");
            }
        }
        return lista;
    }
}