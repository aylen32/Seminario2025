@page "/AgregarEventoDeportivo/{Id:int?}"
@rendermode InteractiveServer
@using CentroEventos.Aplicacion.Servicio
@inject IServicioSesion Servicio
@inject NavigationManager Navegador;
@inject ModificarEventoDeportivoUseCase ModificarEventoDeportivoUseCase
@inject ObtenerEventoDeportivoUseCase ObtenerEventoDeportivoUseCase
@inject AltaEventoDeportivoUseCase AltaEventoDeportivoUseCase
@if(!accesoPermitido){
  <p>
    Redirigiendo...
  </p>
}
@if (_mensajeErrores?.Count > 0)
{
    <ul>
        @foreach (var error in _mensajeErrores)
        {
            <li>@error</li>
        }
    </ul>
}
  <style>
    h3{
      color: darkblue;
        
    }
  </style>
@if (_esNuevoEvento)
{
  <h3>Agregando un Nuevo Evento Deportivo</h3>

}
else
{
  <h3>Modificando El Evento "@_evento.Nombre"</h3>
}

<div class="mb-3">
    <label>Nombre del Evento*:</label>
    <input placeholder="Nombre" @bind="_evento.Nombre" class="form-control" />
</div>

<div class="mb-3">
    <label>Descripción*:</label>
    <input placeholder="Descripción" @bind="_evento.Descripcion" class="form-control" />
</div>

<div class="mb-3">
    <label>Fecha y Hora de Inicio</label>
    <input type="datetime-local" @bind="_evento.FechaHoraInicio" class="form-control" />

</div>

<div class="mb-3">
    <label>Duración (en horas)</label>
    <input placeholder="Duración en horas" @bind="_evento.DuracionHoras" class="form-control" />
</div>

<div class="mb-3">
    <label>Cupo Máximo de Participantes</label>
    <input placeholder="Cupo máximo de participantes" @bind="_evento.CupoMaximo" class="form-control" />
</div>

<div class="mb-3">
    <label>Id del Responsable*:</label>
    <input placeholder="Id del responsable" @bind="_evento.ResponsableId" class="form-control" readonly="@(!_esNuevoEvento)" />
</div>

<button class="btn btn-primary" @onclick="Aceptar">
    <span class="material-symbols-outlined" style="vertical-align: middle; margin-right: 4px;">add_circle</span>
    Aceptar
</button>

@code {
  
    private bool accesoPermitido;
    private bool redirigido = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !Servicio.EstaAutenticado && !redirigido)
        {
            redirigido = true;
            Navegador.NavigateTo("/");
        }
        else if (firstRender)
        {
            accesoPermitido = true;
            StateHasChanged(); // actualiza el render
        }

        return Task.CompletedTask;
    }
  EventoDeportivo _evento = EventoDeportivo.CrearNuevo();
  [Parameter] public int? Id { get; set; }
  bool _esNuevoEvento = true;
  List<string> _mensajeErrores = new();

  protected override void OnParametersSet()
  {
    if (Id != null)
    {
      var even_hallado = ObtenerEventoDeportivoUseCase.Ejecutar(Id.Value, @Servicio.UsuarioActual!.Id);
      if (even_hallado != null)
      {
        _evento = even_hallado;
        _esNuevoEvento = false;
      }
    }
  }

  void Aceptar()
  {
    _mensajeErrores.Clear();

    try
    {
        if (_esNuevoEvento)
            AltaEventoDeportivoUseCase.Ejecutar(_evento, @Servicio.UsuarioActual!.Id);
        else
            ModificarEventoDeportivoUseCase.Ejecutar(_evento,@Servicio.UsuarioActual!.Id);

        _evento = EventoDeportivo.CrearNuevo();
        StateHasChanged();
        Navegador.NavigateTo("ListadoEventosDeportivos");
    }

    catch (CentroEventos.Aplicacion.Excepciones.ValidacionException ex)
    {
      var msg = ex.Message;
      _mensajeErrores = msg
        .Split(new string[] { ". " }, StringSplitOptions.RemoveEmptyEntries)
        .Select(s => s.Trim() + ".") 
        .ToList();
    }
  }
}