@page "/AgregarEventoDeportivo/{Id:int?}"
@rendermode InteractiveServer
@using CentroEventos.Aplicacion.Servicio
@inject IServicioSesion Servicio
@inject NavigationManager Navegador
@inject ModificarEventoDeportivoUseCase ModificarEventoDeportivoUseCase
@inject ObtenerEventoDeportivoUseCase ObtenerEventoDeportivoUseCase
@inject AltaEventoDeportivoUseCase AltaEventoDeportivoUseCase

<div class="evento-form-container">
    @if (!accesoPermitido)
    {
        <p class="status-loading">Redirigiendo...</p>
    }

    <div class="evento-form-header">
        @if (_esNuevoEvento)
        {
            <h3>Agregar Nuevo Evento Deportivo</h3>
            <p>Complete todos los campos requeridos (*)</p>
        }
        else
        {
            <h3>Editar Evento: @_evento.Nombre</h3>
            <p>Modifique los campos necesarios</p>
        }
    </div>
    @if (_mensajeErrores?.Count > 0)
    {
        <div class="error-container">
            <strong>Se encontraron los siguientes errores:</strong>
            <ul class="error-list">
                @foreach (var error in _mensajeErrores)
                {
                    <li class="error-item">@error</li>
                }
            </ul>
        </div>
    }

    <div class="evento-form-group">
        <label class="evento-form-label">Nombre del Evento*:</label>
        <input placeholder="Ingrese el nombre del evento" 
               @bind="_evento.Nombre" 
               class="evento-form-control" />
    </div>

    <div class="evento-form-group">
        <label class="evento-form-label">Descripción*:</label>
        <input placeholder="Ingrese una descripción" 
               @bind="_evento.Descripcion" 
               class="evento-form-control" />
    </div>

    <div class="evento-form-group">
        <label class="evento-form-label">Fecha y Hora de Inicio*:</label>
        <input type="datetime-local" 
               @bind="_evento.FechaHoraInicio" 
               class="evento-form-control" />
    </div>

    <div class="evento-form-group">
        <label class="evento-form-label">Duración (horas)*:</label>
        <input placeholder="Ej: 2.5" 
               @bind="_evento.DuracionHoras" 
               class="evento-form-control" 
               type="number" step="0.5" min="0.5" />
    </div>

    <div class="evento-form-group">
        <label class="evento-form-label">Cupo Máximo*:</label>
        <input placeholder="Ej: 100" 
               @bind="_evento.CupoMaximo" 
               class="evento-form-control" 
               type="number" min="1" />
    </div>

    <div class="evento-form-group">
        <label class="evento-form-label">ID del Responsable*:</label>
        <input placeholder="ID del responsable" 
               @bind="_evento.ResponsableId" 
               class="evento-form-control" 
               readonly="@(!_esNuevoEvento)" />
    </div>

    <button class="btn-submit-evento" @onclick="ProcesarFormulario">
        <span class="material-symbols-outlined">@(_esNuevoEvento ? "add_circle" : "save")</span>
        @(_esNuevoEvento ? "Crear Evento" : "Guardar Cambios")
    </button>
</div>

@code {
    
    private bool accesoPermitido;
    private bool redirigido = false;

    EventoDeportivo _evento = EventoDeportivo.CrearNuevo();
    [Parameter] public int? Id { get; set; }
    bool _esNuevoEvento = true;
    List<string> _mensajeErrores = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (!Servicio.EstaAutenticado && !redirigido)
            {
                redirigido = true;
                Navegador.NavigateTo("/");
            }
            else
            {
                accesoPermitido = true;
                ActualizarEstado();
            }
        }
    }

    protected override void OnParametersSet()
    {
      if (Id != null)
      {
        try
        {
            var eventoEncontrado = ObtenerEventoDeportivoUseCase.Ejecutar(Id.Value);
            if (eventoEncontrado != null)
            {
                _evento = eventoEncontrado;
                _esNuevoEvento = false;
            }
            else
            {
                _mensajeErrores.Add("No se encontró el evento solicitado.");
            }
        }
        catch (Exception)
        {
            _mensajeErrores.Add("Ocurrió un error al cargar los datos del evento.");
        }
      }
    } 


    void ProcesarFormulario()
    {
      _mensajeErrores.Clear();

      try
      {
        if (_esNuevoEvento)
            AltaEventoDeportivoUseCase.Ejecutar(_evento, Servicio.UsuarioActual!.Id);
        else
            ModificarEventoDeportivoUseCase.Ejecutar(_evento, Servicio.UsuarioActual!.Id);

        _evento = EventoDeportivo.CrearNuevo();
        Navegador.NavigateTo("ListadoEventosDeportivos");
      }
      catch (CentroEventos.Aplicacion.Excepciones.ValidacionException ex)
      {
        _mensajeErrores = ex.Message
            .Split(new string[] { ". " }, StringSplitOptions.RemoveEmptyEntries)
            .Select(s => s.Trim() + ".")
            .ToList();
      }
      catch (CentroEventos.Aplicacion.Excepciones.OperacionInvalidaException ex)
      {
        _mensajeErrores.Add(ex.Message);
      }
      catch (CentroEventos.Aplicacion.Excepciones.EntidadNotFoundException ex)
      {
        _mensajeErrores.Add(ex.Message);
      }
      catch (Exception)
      {
        _mensajeErrores.Add("Ocurrió un error inesperado al guardar el evento.");
      }
      finally
      {
        ActualizarEstado();
      }
    }


    private void ActualizarEstado()
    {
        InvokeAsync(StateHasChanged);
    }
}