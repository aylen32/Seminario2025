@page "/home"
@using CentroEventos.Aplicacion.Excepciones
@inject IServicioSesion Sesion
@inject NavigationManager Navigation
@inject IRepositorioReserva _reservaRepo
@inject ListarEventosConCupoDisponibleUseCase ListarEventosConCupo
@inject ListarAsistenciaAEventoUseCase ListarAsistencias

@if (!accesoPermitido)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
   

    <h1>Sistema de Gestión del Centro Deportivo Universitario</h1>
    <h3>¡Bienvenido/a, @Sesion.UsuarioActual?.Nombre!</h3>

    <div class="eventos-container">
       <h4 class="section-title">Próximos eventos con cupo disponible</h4>
        
        @if (eventosConCupo == null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando eventos...</span>
                </div>
            </div>
        }
        else if (!eventosConCupo.Any())
        {
            <div class="no-eventos">
                <p>No hay eventos próximos con cupo disponible en este momento.</p>
                <p>¡Vuelve a consultar más tarde!</p>
            </div>
        }
        else
        {
            <div class="eventos-list">
                @foreach (var evento in eventosConCupo)
                {
                    var cupoDisponible = evento.CupoMaximo - reservasPorEvento[evento.Id];
                    
                    <div class="evento-card">
                        <div class="evento-header">@evento.Nombre</div>
                        <div class="evento-fecha">
                            @evento.FechaHoraInicio.ToString("dddd, d 'de' MMMM 'a las' HH:mm")
                        </div>
                        
                        <div class="evento-cupo">
                            Cupos disponibles: @cupoDisponible de @evento.CupoMaximo
                        </div>
                        <a href="/AgregarReserva"@evento.Id" class="btn-reservar">
                            Reservar ahora
                        </a>
                    </div>
                }
            </div>
        }
    </div>
   

    <div class="busqueda-container">
        <h4 class="section-title">Verificar asistentes a eventos pasados</h4>
        
        <div class="form-busqueda">
            <input type="number" class="input-id" placeholder="Ingrese ID del evento" @bind="idEventoBusqueda" />
            <button class="btn-buscar" @onclick="BuscarAsistentes">Buscar</button>
        </div>
        
        @if (buscando)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Buscando asistentes...</span>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(mensajeError))
        {
            <div class="error-message">@mensajeError</div>
        }
        else if (asistentes != null)
        {
            <div class="asistentes-list">
                @if (asistentes.Any())
                {
                    <p>Total de asistentes: @asistentes.Count</p>
                    @foreach (var asistente in asistentes)
                    {
                        <div class="asistente-item">
                            <div class="asistente-info">
                                <span class="asistente-nombre">@asistente.Nombre @asistente.Apellido</span>
                                <span class="asistente-email">@asistente.Mail</span>
                            </div>
                            <div>
                                <span>DNI: @asistente.DNI</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="no-resultados">
                        <p>No se encontraron asistentes para este evento</p>
                        <p>Verifique el ID o si el evento ya ha ocurrido</p>
                    </div>
                }
            </div>
        }
    </div>
}

@code {

    private bool accesoPermitido;
  
    private List<EventoDeportivo>? eventosConCupo;
    private Dictionary<int, int> reservasPorEvento = new Dictionary<int, int>();
    private int? idEventoBusqueda;
    private List<Persona>? asistentes;
    private bool buscando;
    private string ?mensajeError="";

    protected override async Task OnInitializedAsync()
    {
        if (!Sesion.EstaAutenticado)
        {
          
            Navigation.NavigateTo("/");
            return;
        }
        
        accesoPermitido = true;
        await CargarEventosConCupo();
    }

    private async Task CargarEventosConCupo()
    {
        try
        {
            eventosConCupo = ListarEventosConCupo.Ejecutar() ?? new List<EventoDeportivo>();
            foreach (var evento in eventosConCupo)
            {

                int reservas = ObtenerCantidadReservas(evento.Id);
                reservasPorEvento[evento.Id] = reservas;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando eventos: {ex.Message}");
            eventosConCupo = new List<EventoDeportivo>();
        }
    }
    private int ObtenerCantidadReservas(int eventoId){
        int cant = _reservaRepo.ObtenerReservasPorEvento(eventoId).Count;
        return cant;
    }
        private async Task BuscarAsistentes(){
    
        if (!idEventoBusqueda.HasValue || idEventoBusqueda <= 0)
        {
            mensajeError = "Por favor ingrese un ID de evento válido";
            asistentes = null;
            return;
        }

        try
        {
            buscando = true;
            mensajeError = null;
            asistentes = null;
            await InvokeAsync(StateHasChanged);
            
            asistentes = ListarAsistencias.Ejecutar(idEventoBusqueda.Value);
        }
        catch (EntidadNotFoundException ex)
        {
            mensajeError = ex.Message;
            asistentes = null;
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al buscar asistentes: {ex.Message}";
            asistentes = null;
        }
        finally
        {
            buscando = false;
        }
    }
}
