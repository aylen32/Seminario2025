@using CentroEventos.UI.Components
@using CentroEventos.Aplicacion.Servicio
@using CentroEventos.Aplicacion.Excepciones
@page "/ListadoPersonas"
@inject IServicioSesion Servicio
@inject ListadoPersonasUseCase ListadoPersonasUseCase
@inject BajaPersonaUseCase BajaPersonaUseCase
@inject NavigationManager Navegador

@if (!accesoPermitido)
{
    <p>Redirigiendo...</p>
}

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger" role="alert">
        @mensajeError
    </div>
}

<DialogoConfirmacion @ref="dialogo" OnConfirmado="EliminarPersonaConfirmada"/>

<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Nombre</th>
      <th>Apellido</th>
      <th>DNI</th>
      <th>Telefono</th>
      <th>Email</th>
      <th>Acciones</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var per in _lista)
    {
    <tr>
      <td>@per.Id</td>
      <td>@per.Nombre</td>
      <td>@per.Apellido</td>
      <td>@per.DNI</td>
      <td>@per.Telefono</td>
      <td>@per.Mail</td>
      <td>
        <button class="boton-personalizado-editar" @onclick="() => NavegarAEditarPersona(per)">
          Editar
        </button>
        <button class="boton-personalizado-eliminar" @onclick="() => MostrarDialogoConfirmacionEliminacion(per)">
          Eliminar
        </button>
      </td>
    </tr>
    }
  </tbody>
</table>

@code {
    private bool accesoPermitido;
    private bool redirigido = false;

    private string? mensajeError;

    List<Persona> _lista = new List<Persona>();
    DialogoConfirmacion dialogo = null!;
    Persona? _personaParaEliminar = null;

    protected override void OnAfterRender(bool primerRender)
    {
        if (primerRender)
        {
            if (!Servicio.EstaAutenticado && !redirigido)
            {
                redirigido = true;
                Navegador.NavigateTo("/");
            }
            else
            {
                accesoPermitido = true;
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        ActualizarListadoPersonas();
    }

    private void ActualizarListadoPersonas()
    {
        _lista = ListadoPersonasUseCase.Ejecutar();
    }

    private void MostrarDialogoConfirmacionEliminacion(Persona persona)
    {
        _personaParaEliminar = persona;
        mensajeError = null;
        dialogo.Mostrar($"¿Desea eliminar a {persona.Nombre} {persona.Apellido}?");
    }

    private void EliminarPersonaConfirmada()
    {
        if (_personaParaEliminar == null)
            return;

        try
        {
            BajaPersonaUseCase.Ejecutar(_personaParaEliminar.Id);
            mensajeError = null;
            ActualizarListadoPersonas();
            StateHasChanged();
        }
        catch (OperacionInvalidaException ex)
        {
            mensajeError = ex.Message;
            StateHasChanged();
        }
        catch (EntidadNotFoundException ex)
        {
            mensajeError = ex.Message;
            StateHasChanged();
        }
        catch (Exception)
        {
            mensajeError = "Ocurrió un error inesperado al intentar eliminar la persona.";
            StateHasChanged();
        }
    }

    private void NavegarAEditarPersona(Persona persona)
    {
        Navegador.NavigateTo($"AgregarPersona/{persona.Id}");
    }
}