@using CentroEventos.UI.Components
@using CentroEventos.Aplicacion.Servicio
@using CentroEventos.Aplicacion.Excepciones
@page "/ListadoPersonas"
@inject IServicioSesion Servicio
@inject ListadoPersonasUseCase ListadoPersonasUseCase
@inject BajaPersonaUseCase BajaPersonaUseCase
@inject NavigationManager Navegador

@if (!accesoPermitido)
{
    <p>Redirigiendo...</p>
}

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger" role="alert">
        @mensajeError
    </div>
}

<DialogoConfirmacion @ref="dialogo" OnConfirmado="EliminarPersonaConfirmada"/>

<div class="personas-container">
  <div class="personas-header">
    <h1>Listado de Personas</h1>
    <p>Gestión de personas registradas</p>
  </div>

  <div class="personas-card">
    <div class="table-container">
      <table class="personas-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>DNI</th>
            <th>Telefono</th>
            <th>Email</th>
            <th>Acciones</th>
          </tr>
        </thead> 
        <tbody>
        @if (_lista.Count == 0)
        {
          <tr>
            <td colspan="8" class="no-personas">No hay personas registradas</td>
          </tr>
        }
        else
        {
          @foreach (var per in _lista)
          {
          <tr>
            <td>@per.Id</td>
            <td>@per.Nombre</td>
            <td>@per.Apellido</td>
            <td>@per.DNI</td>
            <td>@per.Telefono</td>
            <td>@per.Mail</td>
            <td class="actions-cell">
              <button class="action-btn edit-btn" @onclick="() => NavegarAEditarPersona(per)">
                Editar
              </button>
              <button class="action-btn delete-btn" @onclick="() => MostrarDialogoConfirmacionEliminacion(per)">
                Eliminar
              </button>
            </td>
          </tr>
          }
        }
        </tbody>
      </table>
    </div>
  </div>
</div>

@code {
    private bool accesoPermitido;
    private bool redirigido = false;

    private string? mensajeError;

    List<Persona> _lista = new List<Persona>();
    DialogoConfirmacion dialogo = null!;
    Persona? _personaParaEliminar = null;

    protected override void OnAfterRender(bool primerRender)
    {
        if (primerRender)
        {
            if (!Servicio.EstaAutenticado && !redirigido)
            {
                redirigido = true;
                Navegador.NavigateTo("/");
            }
            else
            {
                accesoPermitido = true;
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        ActualizarListadoPersonas();
    }

    private void ActualizarListadoPersonas()
    {
        _lista = ListadoPersonasUseCase.Ejecutar();
    }

    private void MostrarDialogoConfirmacionEliminacion(Persona persona)
    {
        _personaParaEliminar = persona;
        mensajeError = null;
        dialogo.Mostrar($"¿Desea eliminar a {persona.Nombre} {persona.Apellido}?");
    }

    private void EliminarPersonaConfirmada()
    {
        if (_personaParaEliminar == null)
            return;

        try
        {
            BajaPersonaUseCase.Ejecutar(_personaParaEliminar.Id);
            mensajeError = null;
            ActualizarListadoPersonas();
            StateHasChanged();
        }
        catch (OperacionInvalidaException ex)
        {
            mensajeError = ex.Message;
            StateHasChanged();
        }
        catch (EntidadNotFoundException ex)
        {
            mensajeError = ex.Message;
            StateHasChanged();
        }
        catch (Exception)
        {
            mensajeError = "Ocurrió un error inesperado al intentar eliminar la persona.";
            StateHasChanged();
        }
    }

    private void NavegarAEditarPersona(Persona persona)
    {
        Navegador.NavigateTo($"AgregarPersona/{persona.Id}");
    }
}