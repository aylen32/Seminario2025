@page "/AgregarPersona/{Id:int?}"
@rendermode InteractiveServer
@using CentroEventos.Aplicacion.Servicio
@inject IServicioSesion Servicio
@inject NavigationManager Navegador
@inject ModificarPersonaUseCase ModificarPersonaUseCase
@inject ObtenerPersonaUseCase ObtenerPersonaUseCase
@inject AltaPersonaUseCase AltaPersonaUseCase

@if (!accesoPermitido)
{
    <p>Redirigiendo...</p>
}

@if (_mensajeErrores?.Count > 0)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in _mensajeErrores)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<style>
    h3 {
        color: darkblue;
    }
</style>

@if (_esNuevaPersona)
{
    <h3>Agregando una Nueva Persona</h3>
}
else
{
    <h3>Modificando a la Persona "@_persona.Nombre"</h3>
}

<div class="mb-3">
    <label>Nombre*:</label>
    <input placeholder="Nombre" @bind="_persona.Nombre" class="form-control" />
</div>

<div class="mb-3">
    <label>Apellido*:</label>
    <input placeholder="Apellido" @bind="_persona.Apellido" class="form-control" />
</div>

<div class="mb-3">
    <label>DNI*:</label>
    <input placeholder="DNI" @bind="_persona.DNI" class="form-control" />
</div>

<div class="mb-3">
    <label>Teléfono</label>
    <input placeholder="Teléfono" @bind="_persona.Telefono" class="form-control" />
</div>

<div class="mb-3">
    <label>Email*:</label>
    <input placeholder="Email" @bind="_persona.Mail" class="form-control" />
</div>

<button class="btn btn-primary" @onclick="Aceptar">
    <span class="material-symbols-outlined" style="vertical-align: middle; margin-right: 4px;">add_circle</span>
    Aceptar
</button>

@code {
    private bool accesoPermitido;
    private bool redirigido = false;

    Persona _persona = Persona.CrearNueva();
    [Parameter] public int? Id { get; set; }
    bool _esNuevaPersona = true;
    List<string> _mensajeErrores = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (!Servicio.EstaAutenticado && !redirigido)
            {
                redirigido = true;
                Navegador.NavigateTo("/");
            }
            else
            {
                accesoPermitido = true;
                StateHasChanged();
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (Id != null)
        {
            var per_hallada = ObtenerPersonaUseCase.Ejecutar(Id.Value);
            if (per_hallada != null)
            {
                _persona = per_hallada;
                _esNuevaPersona = false;
            }
        }
    }

    void Aceptar()
    {
        _mensajeErrores.Clear();

        try
        {
            if (_esNuevaPersona)
                AltaPersonaUseCase.Ejecutar(_persona);
            else
                ModificarPersonaUseCase.Ejecutar(_persona);

            _persona = Persona.CrearNueva();
            Navegador.NavigateTo("ListadoPersonas");
        }
        catch (CentroEventos.Aplicacion.Excepciones.ValidacionException ex)
        {
            _mensajeErrores = ex.Message
                .Split(new string[] { ". " }, StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim() + ".")
                .ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Para errores no previstos
            _mensajeErrores = new List<string> { "Ocurrió un error inesperado: " + ex.Message };
            StateHasChanged();
        }
    }
}