@page "/AgregarPersona/{Id:int?}"
@rendermode InteractiveServer
@using CentroEventos.Aplicacion.Servicio
@inject IServicioSesion Servicio
@inject NavigationManager Navegador
@inject ModificarPersonaUseCase ModificarPersonaUseCase
@inject ObtenerPersonaUseCase ObtenerPersonaUseCase
@inject AltaPersonaUseCase AltaPersonaUseCase

<div class="persona-form-container">
    @if (!accesoPermitido)
    {
        <p class="status-loading">Redirigiendo...</p>
    }

    @if (_mensajeErrores?.Count > 0)
    {
        <div class="error-container">
            <strong>Se encontraron los siguientes errores:</strong>
            <ul class="error-list">
                @foreach (var error in _mensajeErrores)
                {
                    <li class="error-item">@error</li>
                }
            </ul>
        </div>
    }

    <div class="persona-form-header">
        @if (_esNuevaPersona)
        {
            <h3>Agregar Nueva Persona</h3>
            <p>Complete todos los campos requeridos (*)</p>
        }
        else
        {
            <h3>Editar Persona: @_persona.Nombre @_persona.Apellido</h3>
            <p>Modifique los campos necesarios</p>
        }
    </div>

    <div class="persona-form-group">
        <label class="persona-form-label">Nombre*:</label>
        <input placeholder="Ingrese el nombre" 
               @bind="_persona.Nombre" 
               class="persona-form-control" />
    </div>

    <div class="persona-form-group">
        <label class="persona-form-label">Apellido*:</label>
        <input placeholder="Ingrese el apellido" 
               @bind="_persona.Apellido" 
               class="persona-form-control" />
    </div>

    <div class="persona-form-group">
        <label class="persona-form-label">DNI*:</label>
        <input placeholder="Ingrese el DNI" 
               @bind="_persona.DNI" 
               class="persona-form-control" />
    </div>

    <div class="persona-form-group">
        <label class="persona-form-label">Teléfono:</label>
        <input placeholder="Ingrese el teléfono" 
               @bind="_persona.Telefono" 
               class="persona-form-control" />
    </div>

    <div class="persona-form-group">
        <label class="persona-form-label">Email*:</label>
        <input placeholder="Ingrese el email" 
               @bind="_persona.Mail" 
               class="persona-form-control" 
               type="email" />
    </div>

    <button class="btn-submit-persona" @onclick="Aceptar">
        <span class="material-symbols-outlined">@(_esNuevaPersona ? "person_add" : "save")</span>
        @(_esNuevaPersona ? "Agregar Persona" : "Guardar Cambios")
    </button>
</div>

@code {
    private bool accesoPermitido;
    private bool redirigido = false;

    Persona _persona = Persona.CrearNueva();
    [Parameter] public int? Id { get; set; }
    bool _esNuevaPersona = true;
    List<string> _mensajeErrores = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (!Servicio.EstaAutenticado && !redirigido)
            {
                redirigido = true;
                Navegador.NavigateTo("/");
            }
            else
            {
                accesoPermitido = true;
                StateHasChanged();
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (Id != null)
        {
            var per_hallada = ObtenerPersonaUseCase.Ejecutar(Id.Value);
            if (per_hallada != null)
            {
                _persona = per_hallada;
                _esNuevaPersona = false;
            }
        }
    }

    void Aceptar()
    {
        _mensajeErrores.Clear();

        try
        {
            if (_esNuevaPersona)
                AltaPersonaUseCase.Ejecutar(_persona);
            else
                ModificarPersonaUseCase.Ejecutar(_persona);

            _persona = Persona.CrearNueva();
            Navegador.NavigateTo("ListadoPersonas");
        }
        catch (CentroEventos.Aplicacion.Excepciones.ValidacionException ex)
        {
            _mensajeErrores = ex.Message
                .Split(new string[] { ". " }, StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim() + ".")
                .ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _mensajeErrores = new List<string> { "Ocurrió un error inesperado: " + ex.Message };
            StateHasChanged();
        }
    }
}